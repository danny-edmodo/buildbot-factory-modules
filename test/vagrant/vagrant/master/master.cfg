# -*- python -*-
# -*- coding: UTF-8 -*-
# ex: set syntax=python:
from vagrant import *

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("example-slave", "pass")]

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9990

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

from buildbot.changes.gitpoller import GitPoller
c['change_source'] = GitPoller(
        'git://github.com/buildbot/pyflakes.git',
        workdir='gitpoller-workdir', branch='master',
        pollinterval=300)

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.changes import filter
c['schedulers'] = []
c['schedulers'].append(SingleBranchScheduler(
                            name="all",
                            change_filter=filter.ChangeFilter(branch='master'),
                            treeStableTimer=None,
                            builderNames=["runtests"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source import Git
from buildbot.steps.shell import ShellCommand

factory = BuildFactory()
v1 = Vagrant(factory = factory,
             basedir = '/tmp/test-vagrant1',
             boxname = 'vm-for-acceptance',
             boxurl  = 'http://files.vagrantup.com/lucid32.box',)

v2 = Vagrant(factory = factory,
             basedir = '/tmp/test-vagrant2',
             boxname = 'vm-for-acceptance',
             boxurl  = 'http://files.vagrantup.com/lucid32.box',
             vm = v1)

v2.start()
v2.addShellCmdInVm(['uptime', '&&', 'uname', '-a'])
v1.addShellCmdInVm(['uname', '-a', '&&', 'uptime'])

factory_quick = BuildFactory()
v1_quick = Vagrant(factory = factory_quick,
             basedir = '/tmp/test-vagrant1',
             boxname = 'vm-for-acceptance',
             boxurl  = 'http://files.vagrantup.com/lucid32.box',)

v2_quick = Vagrant(factory = factory_quick,
             basedir = '/tmp/test-vagrant2',
             boxname = 'vm-for-acceptance',
             boxurl  = 'http://files.vagrantup.com/lucid32.box',
             vm = v1_quick)

v2_quick.start(quick = True)
##v2_quick.addShellCmdInVm(['hostname', '&&', 'uptime', '&&', 'uname', '-a'])
##v1_quick.addShellCmdInVm(['hostname', '&&', 'uname', '-a', '&&', 'uptime'])
#v2_quick.addUploadGitDir(
#    repo_url = 'git://github.com/sathlan/sathlan-buildbot.git',
#    dest_dir = '/home/vagrant/src')
v2_quick.addDownloadFile(
    src_file = '/tmp/vagrant-bb.test',
    dst_file = '/home/vagrant/vagrant-bb.test')
#v2_quick.addDownloadFile(
#    src_file = """
#Un petit test pour voir.
#
#Ça fonctionne bien, et ça support pas les caractères non-ascii, voir
#http://www.python.org/dev/peps/pep-0263/
#
#lun  9 avr 2012 13:41:16 CEST
#""",
#    dst_file = '/home/vagrant/vagrant-bb-text.test')


from buildbot.config import BuilderConfig

c['builders'] = []
c['builders'].append(
    BuilderConfig(name="runtests",
      slavenames=["example-slave"],
      factory=factory))

c['builders'].append(
    BuilderConfig(name="runtests_quick",
      slavenames=["example-slave"],
      factory=factory_quick))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz
authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    gracefulShutdown = True,
    forceBuild = True, # use this to test your slave once it is set up
    forceAllBuilds = True,
    pingBuilder = True,
    stopBuild = True,
    stopAllBuilds = True,
    cancelPendingBuild = True,
)
c['status'].append(html.WebStatus(http_port=8011, authz=authz_cfg))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "Pyflakes"
c['titleURL'] = "http://divmod.org/trac/wiki/DivmodPyflakes"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:8011/"

####### DB URL

# This specifies what database buildbot uses to store change and scheduler
# state.  You can leave this at its default for all but the largest
# installations.
c['db_url'] = "sqlite:///state.sqlite"

